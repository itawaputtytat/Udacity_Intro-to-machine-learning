source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
makeTerrainData(100)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
makeTerrainData(100)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
makeTerrainData(100)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
makeTerrainData(100)
?runif
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
?runif
makeTerrainData(100)
range(0, 1)
range(0, 6)
for(i in range(0, 2)) print i
for(i in range(0, 2)) print(i)
test <- makeTerrainData(1000)
test
str(test)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
test <- makeTerrainData(1000)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
test <- makeTerrainData(1000)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
test <- makeTerrainData(1000)
list(test$grade, test$bumpy)
as.list(paste(test$grade, test$bumpy)
as.list(paste(test$grade, test$bumpy))
rbind(grade, bumpy)
ls()
test
dim(test$grade)
dim(test)
dim(cbind(grade, bumpy))
dim(cbind(test$grade, test$bumpy))
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
test <- makeTerrainData(1000)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
test <- makeTerrainData(1000)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
test <- makeTerrainData(1000)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
test <- makeTerrainData(1000)
test
test$X_train
grade_sig <- X_train[y_train == 0, 1]
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
makeTerrainData(10)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
makeTerrainData(10)
makeTerrainData(1000)
test = makeTerrainData()
test$grade
test$bumpy
test$error
test$y
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
test = makeTerrainData()
test$grade
test$y
dat <- makeTerrainData()
features_train = dat$X_train
features_train = dat$y
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
library(e1071)
?naiveBayes
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/studentMain.R')
labels_train
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
## The training data (features_train, labels_train) have both "fast" and "slow"
## points mixed in together -- separate them so we can give them different
## colors in the scatterplot, and visually identify them
grade_fast <- features_train[labels_train == 0, 1]
bumpy_fast <- features_train[labels_train == 0, 2]
grade_slow <- features_train[labels_train == 1, 1]
bumpy_slow <- features_train[labels_train == 1, 2]
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
## The training data (features_train, labels_train) have both "fast" and "slow"
## points mixed in together -- separate them so we can give them different
## colors in the scatterplot, and visually identify them
grade_fast <- features_train[labels_train == 0, 1]
bumpy_fast <- features_train[labels_train == 0, 2]
grade_slow <- features_train[labels_train == 1, 1]
bumpy_slow <- features_train[labels_train == 1, 2]
labels_train == 0
grade_fast <- features_train[labels_train == 0, 1]
features_train
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
sum(labels_train == 0)
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
## The training data (features_train, labels_train) have both "fast" and "slow"
## points mixed in together -- separate them so we can give them different
## colors in the scatterplot, and visually identify them
grade_fast <- features_train[labels_train[1:length(features_train)] == 0, 1]
bumpy_fast <- features_train[labels_train[1:length(features_train)] == 0, 2]
grade_slow <- features_train[labels_train[1:length(features_train)] == 1, 1]
bumpy_slow <- features_train[labels_train[1:length(features_train)] == 1, 2]
sum8labels_train[1:length(features_train)]
sum(labels_train[1:length(features_train)])
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
## The training data (features_train, labels_train) have both "fast" and "slow"
## points mixed in together -- separate them so we can give them different
## colors in the scatterplot, and visually identify them
grade_fast <- features_train[labels_train == 0, 1]
bumpy_fast <- features_train[labels_train == 0, 2]
grade_slow <- features_train[labels_train == 1, 1]
bumpy_slow <- features_train[labels_train == 1, 2]
clf <- classify(features_train, labels_train)
features_train
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
## The training data (features_train, labels_train) have both "fast" and "slow"
## points mixed in together -- separate them so we can give them different
## colors in the scatterplot, and visually identify them
grade_fast <- features_train[labels_train == 0, 1]
bumpy_fast <- features_train[labels_train == 0, 2]
grade_slow <- features_train[labels_train == 1, 1]
bumpy_slow <- features_train[labels_train == 1, 2]
features_train
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
## The training data (features_train, labels_train) have both "fast" and "slow"
## points mixed in together -- separate them so we can give them different
## colors in the scatterplot, and visually identify them
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
test=3
1:test
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
1:test
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/makeTerrainData.R')
dat <- makeTerrainData()
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
## The training data (features_train, labels_train) have both "fast" and "slow"
## points mixed in together -- separate them so we can give them different
## colors in the scatterplot, and visually identify them
grade_fast <- features_train[labels_train == 0, 1]
bumpy_fast <- features_train[labels_train == 0, 2]
grade_slow <- features_train[labels_train == 1, 1]
bumpy_slow <- features_train[labels_train == 1, 2]
clf <- classify(features_train, labels_train)
clf
plot(clf)
library(e1071)
plot(clf)
plot(naiveBayes(features_train, labels_train))
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
clf <- classify(features_train, labels_train)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
clf <- classify(features_train, labels_train)
plot(clf)
clf
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
clf <- classify(features_train, labels_train)
plot(clf)
clf
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
clf <- classify(features_train, labels_train)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
clf <- classify(features_train, labels_train)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
clf <- classify(features_train, labels_train)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
clf <- classify(features_train, labels_train)
clf
str(clf)
myplot
?seq
?expand.grid()
expand.grid(seq(x_min, x_max, h), seq(y_min, y_max, h))
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/class_vis.R')
prettyPicture(clf, X_test, y_test = )
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/class_vis.R')
prettyPicture(clf, X_test, y_test = )
prettyPicture(clf, features_test, labels_test)
expand.grid(seq(0, 1, .01), seq(0, 1, .01))
xx <- matrix(seq(0, 1, 0.1), seq(0, 1, 0.1), nrow = length(seq(0, x_max, 0.1)))
xx <- matrix(seq(0, 1, 0.1), seq(0, 1, 0.1), nrow = length(seq(0, 1, 0.1)))
xx <- matrix(c(seq(0, 1, 0.1), seq(0, 1, 0.1)), nrow = length(seq(0, 1, 0.1)))
xx
xx <- matrix(c(seq(0, 1, 0.01), seq(0, 1, 0.01)), nrow = length(seq(0, 1, 0.01)))
xx
xx_seq <- seq(0, 1, 0.01)
matrix(rep(xx_seq, length(xx_seq)), nrow = xx_seq)
length(xx_seq)
xx_seq
xx_seq <- seq(x_min, x_max, h)[-1]
xx_seq <- seq(0, 1, 0.01)
xx_seq
xx_seq[-1]
xx_seq[:-1]
?head
tail(xx_seq, -1)
tail(xx_seq, 1)
x_min <- 0
x_max <- 0
y_min <- 1
y_max <- 1
## Plot the decision boundary. For that, we will assign a color to each point
## in the mesh [x_min, m_max]x[y_min, y_max].
h <- .01 # Step size in the mesh
xx_seq <- seq(x_min, x_max, h)
xx_seq <- xx_seq[1:length(xx_seq)-1]
xx_seq
xx_seq <- seq(x_min, x_max, h)
xx_seq
xx_seq <- seq(x_min, x_max, h)
xx_seq
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
## Plot the decision boundary. For that, we will assign a color to each point
## in the mesh [x_min, m_max]x[y_min, y_max].
h <- .01 # Step size in the mesh
xx_seq <- seq(x_min, x_max, h)
xx_seq <- xx_seq[1:length(xx_seq)-1]
xx_seq
xx <- matrix(rep(xx_seq, length(xx_seq), nrow = xx_seq)
print(xx)
}
xx <- matrix(rep(xx_seq, length(xx_seq)), nrow = xx_seq)
length(xx_seq)
xx <- matrix(rep(xx_seq, length(xx_seq)), nrow = length(xx_seq))
xx
xx <- matrix(rep(xx_seq, length(xx_seq)), nrow = length(xx_seq), byrow = T)
xx
rbind(xx)
View(xx)
unlist(xx)
View(unlist(xx))
View(rbind(xx))
View(unclass(xx))
View(cbind(xx))
cbind(xx)
View(as.vector.factor(xx))
View(as.vector(xx))
apply(xx, 1, rbind)
apply(xx, 2, rbind)
xx[1:2,]
rbind(xx[1:2,])
sapply(xx[1:2], rbind)
sapply(xx[1:2], cbind)
sapply(xx[1:2], )
as.vector(t(xx))
View(as.vector(t(xx)))
plot(as.vector(t(xx)))
?predict
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
## Plot the decision boundary. For that, we will assign a color to each point
## in the mesh [x_min, m_max]x[y_min, y_max].
h <- .01 # Step size in the mesh
xx_seq <- seq(x_min, x_max, h)
xx_seq <- xx_seq[1:length(xx_seq)-1]
xx <- matrix(rep(xx_seq, length(xx_seq)), nrow = length(xx_seq), byrow = T)
yy_seq <- seq(y_min, y_max, h)
yy_seq <- yy_seq[1:length(yy_seq)-1]
xx
expand.grid(xx_seq, yy_seq)
Z <- predict(clf, dat_temp)
dat_temp <- expand.grid(xx_seq, yy_seq)
Z <- predict(clf, dat_temp)
Z
str(Z)
clf
dat_temp
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
## The training data (features_train, labels_train) have both "fast" and "slow"
## points mixed in together -- separate them so we can give them different
## colors in the scatterplot, and visually identify them
grade_fast <- features_train[labels_train == 0, 1]
bumpy_fast <- features_train[labels_train == 0, 2]
grade_slow <- features_train[labels_train == 1, 1]
bumpy_slow <- features_train[labels_train == 1, 2]
clf <- classify(features_train, labels_train)
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
## The training data (features_train, labels_train) have both "fast" and "slow"
## points mixed in together -- separate them so we can give them different
## colors in the scatterplot, and visually identify them
grade_fast <- features_train[labels_train == 0, 1]
bumpy_fast <- features_train[labels_train == 0, 2]
grade_slow <- features_train[labels_train == 1, 1]
bumpy_slow <- features_train[labels_train == 1, 2]
clf <- classify(features_train, labels_train)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
clf <- classify(features_train, labels_train)
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
clf <- classify(features_train, labels_train)
clf
x_max <- 1
y_min <- 0
y_max <- 1
## Plot the decision boundary. For that, we will assign a color to each point
## in the mesh [x_min, m_max]x[y_min, y_max].
h <- .01 # Step size in the mesh
xx_seq <- seq(x_min, x_max, h)
xx_seq <- xx_seq[1:length(xx_seq)-1]
yy_seq <- seq(y_min, y_max, h)
yy_seq <- yy_seq[1:length(yy_seq)-1]
dat_temp <- expand.grid(xx_seq, yy_seq)
Z <- predict(clf, dat_temp)
Z
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
clf <- classify(features_train, labels_train)
clf
x_max <- 1
y_min <- 0
y_max <- 1
## Plot the decision boundary. For that, we will assign a color to each point
## in the mesh [x_min, m_max]x[y_min, y_max].
h <- .01 # Step size in the mesh
xx_seq <- seq(x_min, x_max, h)
xx_seq <- xx_seq[1:length(xx_seq)-1]
yy_seq <- seq(y_min, y_max, h)
yy_seq <- yy_seq[1:length(yy_seq)-1]
dat_temp <- expand.grid(xx_seq, yy_seq)
Z <- predict(clf, dat_temp)
Z
source('D:/MOOCs_Resources/Udacity/Intro-to-machine-learning/Coding-Quizzes/R_02_Naive-Bayes_01_GaussianNB/classifyNB.R')
dat <- makeTerrainData()
features_train <- dat$X_train
labels_train <- dat$y_train
features_test <- dat$X_test
labels_test <- dat$y_test
## The training data (features_train, labels_train) have both "fast" and "slow"
## points mixed in together -- separate them so we can give them different
## colors in the scatterplot, and visually identify them
grade_fast <- features_train[labels_train == 0, 1]
bumpy_fast <- features_train[labels_train == 0, 2]
grade_slow <- features_train[labels_train == 1, 1]
bumpy_slow <- features_train[labels_train == 1, 2]
clf <- classify(features_train, labels_train)
clf
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
## Plot the decision boundary. For that, we will assign a color to each point
## in the mesh [x_min, m_max]x[y_min, y_max].
h <- .01 # Step size in the mesh
xx_seq <- seq(x_min, x_max, h)
xx_seq <- xx_seq[1:length(xx_seq)-1]
yy_seq <- seq(y_min, y_max, h)
yy_seq <- yy_seq[1:length(yy_seq)-1]
dat_temp <- expand.grid(xx_seq, yy_seq)
Z <- predict(clf, dat_temp)
Z
?reshape
Z <- matrix(Z, nrow = nrow(xx), ncol = ncol(xx))
Z
h <- .01 # Step size in the mesh
xx_seq <- seq(x_min, x_max, h)
xx_seq <- xx_seq[1:length(xx_seq)-1]
yy_seq <- seq(y_min, y_max, h)
yy_seq <- yy_seq[1:length(yy_seq)-1]
dat_temp <- expand.grid(xx_seq, yy_seq)
Z <- predict(clf, dat_temp)
Z
dim(Z)
str(Z)
length(Z)
Z <- matrix(Z, nrow = nrow(xx), ncol = ncol(xx))
Z <- as.numeric(Z)
Z <- predict(clf, dat_temp)
## Put the result in to a color plot
Z <- matrix(Z, nrow = nrow(xx), ncol = ncol(xx))
head(Z)
dat_temp
Z <- predict(clf, dat_temp)
head(Z)
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
## Plot the decision boundary. For that, we will assign a color to each point
## in the mesh [x_min, m_max]x[y_min, y_max].
h <- .01 # Step size in the mesh
xx_seq <- seq(x_min, x_max, h)
xx_seq <- xx_seq[1:length(xx_seq)-1]
yy_seq <- seq(y_min, y_max, h)
yy_seq <- yy_seq[1:length(yy_seq)-1]
dat_temp <- expand.grid(xx_seq, yy_seq)
Z <- predict(clf, dat_temp)
head(Z)
View(Z)
str(Z)
Z <- predict(clf, dat_temp)
strZ
str(Z)
Z
plot(Z)
View(dat_temp)
h <- .01 # Step size in the mesh
xx_seq <- seq(x_min, x_max, h)
xx_seq <- xx_seq[1:length(xx_seq)-1]
yy_seq <- seq(y_min, y_max, h)
yy_seq <- yy_seq[1:length(yy_seq)-1]
dat_temp <- expand.grid(xx_seq, yy_seq)
Z <- predict(clf, dat_temp)
View(Z)
Z <- matrix(Z, nrow = nrow(xx), ncol = ncol(xx))
View(Z)
clf
clf <- classify(features_train, labels_train)
clf
features_train
tail(features_train)
system("python C:/Users/lb1bmame/Desktop/test.py")
system("python D:/MOOCs_Resources/Udacity/Intro-to-data-analysis/01_Data-analysis-process/test.py")
import os
